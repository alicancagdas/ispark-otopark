version: '3.8'

services:

  react-app:
    build:
      context: ./tariff-creator-dynamic
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - tariff-service
      - tariff-operation-service
    networks:
      - parking-network



  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/upperpackageservice
    networks:
      - parking-network
    ports:
      - "9216:9216"  # dışarıya 9216 portundan aç



  tariff-service:
    build:
      context: ./tariff-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/tariffdb
      - SPRING_DATASOURCE_USERNAME=tariff_user
      - SPRING_DATASOURCE_PASSWORD=tariff_password
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/tariffservice
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  tariff-operation-service:
    build:
      context: ./tariff-operation-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/tariffdb
      - SPRING_DATASOURCE_USERNAME=tariff_op_user
      - SPRING_DATASOURCE_PASSWORD=tariff_op_password
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/tariffoperationservice
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TARIFF_SERVICE_URL=http://tariff-service:8080/api/v1/tariffs
    networks:
      - parking-network


  package-creator-service:
    build:
      context: ./package-creator-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8085:8080"
    depends_on:
      - mysql
      - mongodb
      - kafka
      - customer-type-service
      - vehicle-type-service
      - tariff-service
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/packagecreatorservice
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  customer-type-service:
    build:
      context: ./customer-type-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      - mysql
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/customertypedb
      - SPRING_DATASOURCE_USERNAME=tariff_user
      - SPRING_DATASOURCE_PASSWORD=tariff_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  parkinglot-service:
    build:
      context: ./parkinglot-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8087:8080"
    depends_on:
      - mysql
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/parkinglotdb
      - SPRING_DATASOURCE_USERNAME=tariff_user
      - SPRING_DATASOURCE_PASSWORD=tariff_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  vehicle-type-service:
    build:
      context: ./vehicle-type-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8083:8080"
    depends_on:
      - mysql
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/vehicletypedb
      - SPRING_DATASOURCE_USERNAME=tariff_user
      - SPRING_DATASOURCE_PASSWORD=tariff_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  location-service:
    build:
      context: ./location-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8084:8080"
    depends_on:
      - mysql
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/locationdb
      - SPRING_DATASOURCE_USERNAME=tariff_user
      - SPRING_DATASOURCE_PASSWORD=tariff_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - parking-network

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - parking-network
    command: >
      bash -c "echo 'CREATE DATABASE IF NOT EXISTS tariffdb;' > /docker-entrypoint-initdb.d/init.sql &&
               echo 'CREATE DATABASE IF NOT EXISTS customertypedb;' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'CREATE DATABASE IF NOT EXISTS vehicletypedb;' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'CREATE DATABASE IF NOT EXISTS parkinglotdb;' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'CREATE DATABASE IF NOT EXISTS locationdb;' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'GRANT ALL PRIVILEGES ON tariffdb.* TO \"tariff_user\"@\"%\";' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'GRANT ALL PRIVILEGES ON customertypedb.* TO \"tariff_user\"@\"%\";' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'GRANT ALL PRIVILEGES ON vehicletypedb.* TO \"tariff_user\"@\"%\";' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'GRANT ALL PRIVILEGES ON parkinglotdb.* TO \"tariff_user\"@\"%\";' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'GRANT ALL PRIVILEGES ON locationdb.* TO \"tariff_user\"@\"%\";' >> /docker-entrypoint-initdb.d/init.sql &&
               echo 'FLUSH PRIVILEGES;' >> /docker-entrypoint-initdb.d/init.sql &&
               exec docker-entrypoint.sh mysqld"



  upper-package-service:
    build:
      context: ./upper-package-service
      dockerfile: src/main/resources/Dockerfile
    ports:
      - "8086:8080"
    depends_on:
      - mongodb
      - kafka
      - package-creator-service
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/upperpackageservice
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PACKAGE_CREATOR_SERVICE_URL=http://package-creator-service:8085/api/packages
    networks:
      - parking-network

  mongodb:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    networks:
      - parking-network
    ports:
      - "27017:27017"

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    networks:
      - parking-network
    ports:
      - "2727:8081"
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongodb:27017/"
    depends_on:
      - mongodb



  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - parking-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - parking-network




  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Mount your prometheus.yml configuration
      - prometheus_data:/prometheus  # Persistent volume to store Prometheus data
    ports:
      - "9090:9090"  # Expose Prometheus dashboard on port 9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'  # Use custom configuration file
      - '--storage.tsdb.path=/prometheus'  # Path to store time series data
      - '--web.enable-lifecycle'  # Enable the lifecycle for reloadability of the config
    networks:
      - parking-network  # Attach Prometheus to the parking-network


  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - parking-network

volumes:
  mysql_data:
  mongo_data:
  prometheus_data:  # Persistent volume for Prometheus data storage


networks:
  parking-network:
    driver: bridge
